openapi: 3.0.3
info:
  title: RocketDocument API
  version: 2.0.0

servers:
  - url: https://api-sandbox.rocketlawyer.com/rocketdoc/v2
    description: sandbox
  - url: https://api.rocketlawyer.com/rocketdoc/v2
    description: production

paths:
  /interviews:
    post:
      tags:
        - Interviews
      operationId: create-interview
      summary: Create an Interview
      description: |
        This endpoint allows you to create a new interview session, either persistent or ephemeral.

        **Persistent Interviews**: 
        - Provide a reference to a Binder (`binderId`) or an owner email (`partyEmailAddress`).
        - If a `binderId` is provided, the new interview will be created within the context of this Binder.
        - If a `partyEmailAddress` is used, a new Binder is created.

        **Ephemeral Interviews**: 
        - A Binder is neither used nor created.
        - No user-entered information will be stored.

        **Service Token**:
        - A service token is provided in the response header, scoped to the interview resource for all requests except for persistent interviews when a Binder reference is provided.

      requestBody:
        # description: InterviewCreateRequest
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InterviewCreateRequest"
            examples:
              Ephemeral storage:
                value:
                  storageType: ephemeral
                  partyEmailAddress: user@xyzcompany.com
                  partnerEndUserId: cfd1ee5a-061a-40cc-be72-8cbb9945b5d9
                  templateId: 0af17ba7-f332-5346-bb3f-00b7c9af7deb
              Persistent storage with binderId:
                value:
                  binderId: 0af17ba7-f332-5346-bb3f-00b7c9af7deb
                  partnerEndUserId: cfd1ee5a-061a-40cc-be72-8cbb9945b5d9
                  templateId: 0af17ba7-f332-5346-bb3f-00b7c9af7deb
              Persistent storage with partyEmailAddress:
                value:
                  partyEmailAddress: user@xyzcompany.com
                  partnerEndUserId: cfd1ee5a-061a-40cc-be72-8cbb9945b5d9
                  templateId: 0af17ba7-f332-5346-bb3f-00b7c9af7deb
              Persistent storage with Group Config with defaults exempting email or binder (contact support):
                value:
                  partnerEndUserId: cfd1ee5a-061a-40cc-be72-8cbb9945b5d9
                  templateId: 0af17ba7-f332-5346-bb3f-00b7c9af7deb
        required: true
      responses:
        '201':
          description: Successfully returns a new Interview.
          headers:
            rl-rdoc-servicetoken:
              schema:
                type: string
              description: The service token<br>(Not present when creating an Interview with a pre-existing Binder)
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/interviewCreateResponse"
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false
    get:
      tags:
        - Interviews
      operationId: list-interviews
      summary: List All Interviews
      description: |
          This endpoint returns a list of interviews associated with the partner. The results can optionally be filtered by the `partnerEndUserId` to narrow down the list to a specific end user.
      parameters:
        - name: partnerEndUserId
          in: query
          description: |
            The unique identifier of the partner's end user used to filter the list of interviews. If provided, only interviews associated with this end user will be returned.
          schema:
            $ref: "#/components/schemas/partnerEndUserId"
          required: false
      responses:
        '200':
          description: |
            Successfully returns the status of all interviews belonging to the partner.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/interviewsGetResponse"
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /interviews/{interviewId}:
    get:
      tags:
        - Interviews
      summary: Retrieve Interview by ID
      description: |
        Retrieves the details of an existing interview identified by the `interviewId`. This endpoint allows you to fetch all the information related to a specific interview, including its status and associated data.
      operationId: retrieve-interview
      parameters:
        - $ref: "#/components/parameters/interviewIdPath"
          description: The unique identifier of the interview to retrieve.
      responses:
        '200':
          description: |
            Successfully returns the details of the specified interview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interviewGetResponse'
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false
    delete:
      tags:
        - Interviews
      summary: Delete an Interview
      description: |
        Deletes an existing interview resource identified by the `interviewId`. This operation permanently removes the interview and its associated data from the system.
      operationId: delete-interview
      parameters:
        - $ref: "#/components/parameters/interviewIdPath"
          description: The unique identifier of the interview to be deleted.
      responses:
        '204':
          description: The interview resource was successfully deleted.
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /interviews/{interviewId}/completions:
    post:
      tags:
        - Interviews
      summary: Complete an Interview
      description: |
        Completes the specified interview for which answers have been supplied. This operation finalizes the interview, ensuring that all provided answers are processed and saved.
      operationId: complete-interview
      parameters:
        - $ref: "#/components/parameters/interviewIdPath"
          description: The unique identifier of the interview to be completed.
      responses:
        '201':
          description: The interview was successfully completed and the answers have been processed and saved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewCompleteResponse'
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /interviews/{interviewId}/pages/{pageId}:
    get:
      summary: Retrieve a Page
      tags:
        - Interviews
      description: |
        Retrieves a specific page of the interview identified by `interviewId` and `pageRef`.

        For an ephemeral interview, it is only relevant to get the first page as it will always return the template's default `answersPayload`. The format for the `currentPageData` defaults to **display** and the preview format defaults to **text/html** for this call.

        If currently on the first page of the interview, then the previous page and the current page will be the same. Similarly, if currently on the last page of the interview, the current page and the next page will be the same.
      parameters:
        - $ref: "#/components/parameters/interviewIdPath"
        - $ref: "#/components/parameters/pageRefPath"
      responses:
        "200":
          description: Successfully retrieves the specified page of the interview.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pageResponse"
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
        "405":
          description: Method Not Allowed. Attempted to retrieve a non-first page of an ephemeral interview.
    patch:
      tags:
        - Interviews
      summary: Submit a Page
      operationId: submit-page
      description: |
        Submits the answers for a specific page questions of the interview identified by `interviewId` and `pageId`. 
        
        This operation can also be used to retrieve the next or previous page preview, and/or get the updated preview of the current page. This is controlled by the `format` key in each pages respective data inside the request's body.
        
        If currently on the first page of the interview, then the previous page and the current page will be the same. Similarly, if currently on the last page of the interview, the current page and the next page will be the same.
      parameters:
        - $ref: "#/components/parameters/interviewIdPath"
        - $ref: "#/components/parameters/pageIdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pagePatchRequest"
      responses:
        "200":
          description: Successfully submits the data for the specified page and returns the updated page information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pageResponse"
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized

  /interviews/{interviewId}/tagged-answers:
    get:
      tags:
        - Interviews
      summary: Retrieve Tagged Answers
      description: |
        Retrieves all the answers for tagged fields from the specified interview in Tagged Answer Model (TAM) format.
        
        This endpoint allows you to fetch structured data for the interview, which includes the tagged answers aligned with the TAM structure.
      operationId: retrieve-tagged-answers
      parameters:
        - $ref: "#/components/parameters/interviewIdPath"
      responses:
        '200':
          description: Successfully returns all the answers for tagged fields in TAM format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tam'
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /documents:
    post:
      tags:
        - Documents
      summary: Retrieve Ephemeral Interview Document
      description: |
        Retrieve an ephemeral interview document using the provided `answersPayload`. This endpoint processes the interview responses to generate the specified type of document.
      operationId: post-document
      requestBody:
        # description: InterviewCreateRequest
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/documentsPostRequest"
        required: true
      responses:
        '201':
          description: Successfully retrieves the document from the provided interview data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentsPostResponse'
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /documents/{documentId}:
    get:
      description: |
        Returns the document from a persistent interview in the format specified by the Accept header. This endpoint allows you to fetch the document in either HTML or PDF format, as specified in the request.
      operationId: retrieve-document
      summary: Retrieve Persistent Document
      tags:
        - Documents
      parameters:
        - $ref: "#/components/parameters/documentIdPath"
        - name: Accept
          in: header
          required: false
          description: Specifies the desired format of the document. Supported formats are `text/html` and `application/pdf`.
          schema:
            enum:
              - text/html
              - application/pdf
            type: string
        - name: rl-binder-id
          in: header
          description: The unique identifier of the Binder containing the document to retrieve. This ID is used to locate the specific Binder resource.
          required: true
          schema:
            type: string
        - name: unsigned
          in: query
          description: If present, the unsigned version of the document is served. The unsigned version is the last uploaded version of the document, just before the invitation was triggered.
          required: false
          schema:
            type: string
      responses:
        '303':
          description: Redirection to the file. The response contains the location of the resource where the client should be redirected.
          headers:
            location:
              description: Location of the resource where the client should be redirected.
              schema:
                type: string
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
        '412' :
          description: Precondition Failed. The requested file type is not supported.
      deprecated: false

  /templates:
    get:
      tags:
        - Templates
      summary: Get Templates List
      description: |
        Get a list of Templates available for use.
      operationId: get-templates-list
      parameters:
        - $ref: "#/components/parameters/templateQueryIndex"
        - $ref: "#/components/parameters/lookupValueQuery"
        - $ref: "#/components/parameters/cursorQuery"
        - $ref: "#/components/parameters/pageSizeQuery"
        - $ref: "#/components/parameters/reverseQuery"
      responses:
        '200':
          description: Successfully returns a list of templates.
          headers:
            cursor:
              schema:
                type: string
              description: The cursor used to fetch the next page of results in a paginated response. Include this cursor value in the next request to retrieve the subsequent set of templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templatesGetResponse'
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /templates/{templateId}:
    get:
      tags:
        - Templates
      summary: Retrieve a Template
      description: |
        Retrieves a specific template identified by the `templateId`. The response includes detailed information such as the template's name, short and long descriptions, and URL references to its thumbnail and preview.
      operationId: get-template
      parameters:
        - $ref: "#/components/parameters/templateIdPath"
          description: The unique identifier of the template to be retrieved.
      responses:
        '200':
          description: Successfully returns the requested template, including its details and URL references.
          headers:
            Cache-Control:
              schema:
                type: string
              description: Directives for caching template objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templateGetResponse'
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /templates/{templateId}/preview:
    get:
      tags:
        - Templates
      summary: Retrieve a Template Preview
      description: Retrieves a preview of the specified template identified by the `templateId`. The response provides a visual representation of the template in HTML format.
      operationId: get-template-preview
      parameters:
        - $ref: "#/components/parameters/templateIdPath"
          description: The unique identifier of the template to be retrieved.
        - name: Accept
          in: header
          required: false
          description: Specifies the format of the preview response. Currently, only `text/html` is supported.
          schema:
            enum:
              - text/html
            default: text/html
            type: string
      responses:
        '200':
          description: Successfully returns the template preview in the specified format.
          headers:
            Cache-Control:
              schema:
                type: string
              description: Directives for caching template previews.
          content:
            text/html:
              schema:
                type: string
                example: |
                  <html>
                    <body>
                      <b>Example</b>
                    </body>
                  </html>
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /templates/{templateId}/thumbnail:
    get:
      tags:
        - Templates
      summary: Retrieve a Template Thumbnail
      description: Retrieves the thumbnail image of the specified template identified by the `templateId`. The response provides a visual representation of the template in PNG format.
      operationId: get-template-thumbnail
      parameters:
        - $ref: "#/components/parameters/templateIdPath"
          description: The unique identifier of the template to be retrieved.
        - name: Accept
          in: header
          required: false
          description: Specifies the format of the thumbnail response. Currently, only `image/png` is supported.
          schema:
            enum:
              - image/png
            default: image/png
            type: string
      responses:
        '200':
          description: Successfully returns the template thumbnail in the specified format.
          headers:
            Cache-Control:
              schema:
                type: string
              description: Directives for caching template thumbnail images.
          content:
            image/png:
              schema:
                type: string
                example: image
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /templates/{templateId}/tagged-answer-model:
    get:
      tags:
        - Templates
      summary: Retrieve Tagged Answer Model for a Template
      description: Retrieves the Tagged Answer Model (TAM) for the specified template identified by the `templateId`. The TAM provides a structured format for injecting data into an interview or retrieving data from an interview.
      operationId: get-template-tam
      parameters:
        - $ref: "#/components/parameters/templateIdPath"
      responses:
        '200':
          description: Successfully returns the Tagged Answer Model (TAM) for the specified template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tam'
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

  /entities:
    get:
      tags:
        - Entity Data
      summary: Retrieve Entity Information
      description: |
        Retrieves entity information based on input hints provided through query parameters. This endpoint allows for optimized lookups using specified indices and search values.
      operationId: get-entities
      parameters:
        - $ref: "#/components/parameters/EntityQueryIndex"
        - $ref: "#/components/parameters/lookupValueQuery"
      responses:
        '200':
          description: Successfully returns an object representing suggestions for entity fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityResponse'
        '400':
          description: Bad Request
        '401' :
          description: Unauthorized
      deprecated: false

components:
  parameters:
    documentIdPath:
      name: documentId
      in: path
      description: The unique identifier of the Document
      required: true
      schema:
        type: string
      example: 443B3B1E-584D-480A-A43A-7713F1D62633

    interviewIdPath:
      name: interviewId
      in: path
      description: The unique identifier of the interview.
      required: true
      schema:
        type: string
      example: 76105B3E-AC8A-4202-8ED2-B991A02B8456

    pageRefPath:
      name: pageId
      in: path
      description: |
        Either a pageId or a pseudonym for a page. Enter one of the following options:
        - `pageId`: the unique identifier of the requested page.
        - `"first"`: pseudonym for the first page of the Interview.
        - `"last"`: pseudonym for the last page of the Interview.
      schema:
        type: string
      example: "Fkbbc110f2d2eb"
      required: true

    pageIdPath:
      name: pageId
      in: path
      description: The unique identifier of the page to be submitted.
      schema:
        type: string
      example: "Fkbbc110f2d2eb"
      required: true

    templateIdPath:
      name: templateId
      in: path
      description: The unique identifier of the template.
      required: true
      schema:
        type: string
      example: e3b7da14-a7ef-402d-a50d-50edd3015fa6

    EntityQueryIndex:
      name: index
      in: query
      description: |
        Specifies the name of the index to filter search results, enabling optimized lookups. Use this parameter to target specific indices for more efficient search operations.
      schema:
        type: string
      example: templateName
      required: false

    templateQueryIndex:
      name: index
      in: query
      description: |
        Specifies the name of the index to filter search results. Use this parameter to perform searches against a specific index.
      schema:
        type: string
      example: templateName
      required: false

    lookupValueQuery:
      name: lookupValue
      in: query
      description: |
        The value to search for within the specified index. This parameter works in conjunction with the `index` parameter to refine search results.
        ⚠️ <small>Ignored if the `index` parameter is not present.</small> ⚠️
      schema:
        type: string
      example: "Lease"
      required: false

    cursorQuery:
      name: cursor
      in: query
      description: |
        A pagination cursor used to retrieve the next set of results in a paginated response. Include the cursor value from the previous response to continue fetching results. This parameter is not required for the first search.
        ⚠️ <small>Ignored if the `index` and `lookupValue` parameters are not present.</small> ⚠️
      schema:
        type: string
      example: |
        BFC84903-B4EA-46B0-B7CB-78157A979687
      required: false

    pageSizeQuery:
      name: pageSize
      in: query
      description: |
        Defines the number of results to return per page in a paginated response. Use this parameter to control the amount of data returned in each response.
        The default value is `20`, with a maximum limit of `200`.
        ⚠️ <small>Ignored if the `index` and `lookupValue` parameters are not present.</small> ⚠️
      schema:
        type: integer
      example: 25
      required: false

    reverseQuery:
      name: reverse
      in: query
      description: |
        Determines the order of search results. When set to true, results are returned in reverse order. Use this parameter to reverse the sorting order of the search results. The default value is `false`.
        ⚠️ <small>Ignored if the `index` and `lookupValue` parameters are not present.</small> ⚠️
      schema:
        type: boolean
      example: true
      required: false

  schemas:

    answersPayload:
      type: object
      example:
        "Flfmu8ta21l9eh": ""
        "Flfmufliy5gnuf": ""
        "Flfmulpp4orak5": "true"
        "Flfmum2u1mcvif": "false"
        "Flfmuuwxkfljt6": "true"
        "Flfmuwllpj97qz": "false"
        "Flfmuznrnxr8vn": ""
        "Flfqvnvr121l11": ""
        "Clfqvxpiwq5btl":
          - "Flfqvvhivulxtb": "answer 1"
            "Flfqvwpr3a35lw": "answer 2"
          - "Flfqvvhivulxtb": "answer 3"
            "Flfqvwpr3a35lw": "answer 4"
        "Clfqxxxexkmjzr":
          - "Flfqwerocs85au": ""
        "Flfqyoh037bgfr": ""
        "Flfqyp3z2r6prc": "false"

    binder:
      type: object
      properties:
        binderId:
          type: string
          description: The Binder's unique identifier.
          example: 0af17ba7-f332-5346-bb3f-00b7c9af7deb
        documentId:
          type: string
          description: The Document's unique identifier.
          example: 7d989647-ecf2-4673-9486-80c3b890ed3c
      required:
        - binderId
        - documentId

    document:
      type: object
      properties:
        mimeType:
          $ref: "#/components/schemas/documentMimeType"
        data:
          description: |
            Base64 encoded document in format specified of the caller
          type: string
          example: "PGh0bWw+CiAgPGJvZHk+CiAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LjwvcD4KICA8L2JvZHk+CjwvaHRtbD4K"
      required:
        - mimeType
        - data

    documentsPostRequest:
      type: object
      properties:
        interviewId:
          $ref: "#/components/schemas/interviewId"
        mimeType:
          $ref: "#/components/schemas/documentMimeType"
        answersPayload:
          $ref: "#/components/schemas/answersPayload"
      required:
        - interviewId
        - mimeType
        - answersPayload

    documentsPostResponse:
      type: object
      properties:
        interviewId:
          $ref: "#/components/schemas/interviewId"
        storageType:
          $ref: "#/components/schemas/storageType"
        document:
          $ref: "#/components/schemas/document"
      required:
        - interviewId
        - storageType
        - document

    documentMimeType:
      description: Mime type for document output
      type: string
      enum:
        - text/html
      default: text/html

    fieldType:
      description: |
        Metadata type suggesting what this field should contain and loosely describing how a UI might display it for user interaction.
        The field type provides hints on the nature of the data and the appropriate form input controls to use.
      type: object
      enum:
        - "TEXT"
        - "PARAGRAPH"
        - "DATE"
        - "DROPDOWN"
        - "NUMBER"
        - "CURRENCY"
        - "PERCENTAGE"
        - "SSN"
        - "RADIO"
        - "CHECKBOX"
        - "PHONE_NUMBER"
        - "PHONE_EXT"

    field:
      description: |
        The UI can choose which UI display component
        is best to display the type of data represented
        by these names.
      type: object
      properties:
        id:
          type: string
          example: Fkrp98ynuj7gtr
        type:
          $ref: "#/components/schemas/fieldType"
        default:
          type: string
          description: Indicates the default value for this field - for example if the Radio button then could be "true".
            If no default then "" will be returned
          example: ""
        label:
          type: string
          description: The label to apply to the input to guide the user about what information is expected.
            For example if the question is about Address then the label might be for City
          example: "City"
        symbol:
          description: Any symbol relevant to display the field correctly
          type: string
          example: "$"
      required:
        - id
        - type
        - default
        - label

    help:
      type: string
      example: "Your name should go here."

    interview:
      type: object
      properties:
        interviewId:
          $ref: "#/components/schemas/interviewId"
        interviewName:
          type: string
          description: The Interview's name.
          example: Employment contract
        templateId:
          $ref: "#/components/schemas/templateId"
        templateVersionId:
          type: string
          description: The unique identifier of the template version being used for this interview.
          example: d9243532-6fae-41b8-a082-6d6844fa6246
        partnerEndUserId:
          $ref: "#/components/schemas/partnerEndUserId"
        storageType:
          $ref: "#/components/schemas/storageType"
        interviewStatus:
          type: string
          description: The current status of the Interview.
          enum:
            - created
            - completed
          example: created
        createdAt:
          type: string
          description: The date the resource was created.
          example: '2020-12-01T17:51:40.795Z'
        updatedAt:
          type: string
          description: The date the resource was updated.
          example: '2021-12-01T18:51:40.795Z'
      required:
        - interviewId
        - interviewName
        - storageType
        - interviewStatus
        - createdAt
        - updatedAt
        - templateId
        - templateVersionId

    interviewPersistent:
      description: A Persistent Interview
      allOf:
        - $ref: "#/components/schemas/interview"
        - type: object
          properties:
            answersPayload:
              $ref: "#/components/schemas/answersPayload"
        - type: object
          properties:
            binder:
              $ref: '#/components/schemas/binder'

    interviewEphemeral:
      description: An Ephemeral Interview
      allOf:
        - $ref: "#/components/schemas/interview"
        - type: object
          properties:
            answersPayload:
              $ref: "#/components/schemas/answersPayload"

    InterviewCompleteResponse:
      type: object
      properties:
        binder:
          $ref: '#/components/schemas/binder'

    InterviewCreateRequest:
      oneOf:
        - $ref: "#/components/schemas/Create-Persintent-Interview"
        - $ref: "#/components/schemas/Create-Ephemeral-Interview"

    Create-Ephemeral-Interview:
      type: object
      description: |
        Ephemeral interviews do not create or use binders and do not store user-entered information. 
        This type of interview is typically used for sessions where data persistence is not required.
      properties:
        storageType:
          $ref: "#/components/schemas/storageType" 
        partnerEndUserId:
          $ref: "#/components/schemas/partnerEndUserId"
        templateId:
          $ref: "#/components/schemas/templateId"
        inputData:
          $ref: "#/components/schemas/tam"
      required:
        - storageType
        - templateId

    Create-Persintent-Interview:
      type: object
      description: |
        Persistent interviews store user-entered information and can be associated with a Binder or an owner email address.
        If a `binderId` is provided, the new interview will be created within the context of this Binder. 
        If a `partyEmailAddress` is used, a new Binder is created for the interview.
      properties:
        storageType:
          $ref: "#/components/schemas/storageType"
        binderId:
          type: string
          description: |
            The unique identifier of the Binder to which the interview will be added. 
            This parameter is mutually exclusive with `partyEmailAddress` and should not be used for ephemeral interviews.
          example: 0af17ba7-f332-5346-bb3f-00b7c9af7deb
        partyEmailAddress:
          $ref: "#/components/schemas/partyEmailAddress"
        partnerEndUserId:
          $ref: "#/components/schemas/partnerEndUserId"
        templateId:
          $ref: "#/components/schemas/templateId"
        inputData:
          $ref: "#/components/schemas/tam"
      required:
        - templateId

    partyEmailAddress:
      type: string
      description: |
        The email address of the party for whom the interview is being created.
        If provided, a new Binder is created for this email address.
        This parameter is mutually exclusive with `binderId`.
      example: user@xyzcompany.com

    interviewCreateResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/interviewEphemeral'
        - $ref: '#/components/schemas/interviewPersistent'

    interviewGetResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/interviewEphemeral'
        - $ref: '#/components/schemas/interviewPersistent'

    interviewsGetResponse:
      type: array
      items:
        $ref: '#/components/schemas/interview'

    interviewId:
      description: The unique identifier of the Interview.
      type: string
      example: 76105B3E-AC8A-4202-8ED2-B991A02B8456

    pageId:
      type: string
      description: An opaque ID for a page. Do not depend on the format of these IDs.
      example: "Fkbbc110f2d2eb"

    pageResponse:
      properties:
        answersPayload:
          $ref: "#/components/schemas/answersPayload"
        preview:
          $ref: "#/components/schemas/preview"
        previousPageData:
          oneOf:
            - $ref: '#/components/schemas/pageDataReference'
            - $ref: '#/components/schemas/pageDataDisplaySingle'
            - $ref: '#/components/schemas/pageDataDisplayCyclical'
        currentPageData:
          oneOf:
            - $ref: '#/components/schemas/pageDataReference'
            - $ref: '#/components/schemas/pageDataDisplaySingle'
            - $ref: '#/components/schemas/pageDataDisplayCyclical'
        nextPageData:
          oneOf:
            - $ref: '#/components/schemas/pageDataDisplaySingle'
            - $ref: '#/components/schemas/pageDataDisplayCyclical'
            - $ref: '#/components/schemas/pageDataReference'

    pageDataPatch:
      description: |
        Describes the type of page data:
        - `reference`: Contains only the `pageId` and is used for iterating through an interview, providing navigation without detailed content.
        - `display`: Shows the full question information for that page, including all content necessary for the interview process.
      type: string
      enum:
        - display
        - reference
      default: reference

    pageDataDisplaySingle:
      allOf:
        - $ref: "#/components/schemas/pageDataDisplayCommon"
        - $ref: "#/components/schemas/pageDataDisplaySingleElements"

    pageDataDisplayCyclical:
      allOf:
        - $ref: "#/components/schemas/pageDataDisplayCommon"
        - $ref: "#/components/schemas/pageDataDisplayCyclicalElements"

    pageDataDisplayCommon:
      type: object
      properties:
        pageId:
          $ref: "#/components/schemas/pageId"
        format:
          description: Describes the type of page data - reference only contains a pageId and is used for iterating through an interview; display shows the question information for that page.
          type: string
          enum:
            - display
        progressPercentage:
          type: integer
          example: '78'
        questions:
          $ref: "#/components/schemas/questions"
      required:
        - pageId
        - format
        - progressPercentage
        - questions

    pageDataDisplaySingleElements:
      type: object
      properties:
        type:
          description: Question being returned either a single or cyclical
          type: string
          enum:
            - single
        answers:
          type: object
          description: The answer fields for the questions on the page returned
          example:
            "Flfmulpp4orak5": "true"
            "Flfmum2u1mcvif": "false"
            "Flfmuuwxkfljt6": "true"
      required:
        - type
        - answers

    pageDataDisplayCyclicalElements:
      type: object
      properties:
        cycleId:
          type: string
          description: opaque UUID of the cycle - present only if type=cyclical
          example: "Clfqvxpiwq5btl"
        type:
          description: Question being returned either a single or cyclical
          type: string
          enum:
            - cyclical
        title:
          type: string
          description: Used primarily with chain cyclicals for the overall question title - optional field
          example: "Title of cyclical question"
        answers:
          type: array
          items:
            type: object
            description: An array of answer objects for the questions on the page returned; this is used for where the pageData type=cyclical
            example:
              [
                {
                  "Flfqvvhivulxtb": "answer 1",
                  "Flfqvwpr3a35lw": "answer 2"
                },
                {
                  "Flfqvvhivulxtb": "answer 3",
                  "Flfqvwpr3a35lw": "answer 4"
                }
              ]
      required:
        - cycleId
        - type
        - answers

    pageDataReference:
      type: object
      properties:
        pageId:
          $ref: "#/components/schemas/pageId"
        format:
          description: Describes the type of page data - reference only contains a pageId and it is used for iterating through an interview; display shows the question information for that page.
          type: string
          enum:
            - reference
      required:
        - pageId
        - format

    pagePatchRequest:
      properties:
        answersPayload:
          $ref: "#/components/schemas/answersPayload"
        currentPageData:
          $ref: "#/components/schemas/currentPageDataPatchRequest"
        previousPageData:
          $ref: "#/components/schemas/previousPageDataPatchRequest"
        nextPageData:
          $ref: "#/components/schemas/nextPageDataPatchRequest"
        preview:
          $ref: "#/components/schemas/previewPatchRequest"

    partnerEndUserId:
      type: string
      description: A unique identifier for the end user provided by the partner application. This helps in linking the interview to a specific user within the partner's system.
    templateId:
      description: |
        The unique identifier of the document template to be used for the interview. This template defines the structure and content of the interview. Retrieve a list of available templates with the [Get Templates](/get-templates) endpoint.
      example: cfd1ee5a-061a-40cc-be72-8cbb9945b5d9

    question:
      type: object
      properties:
        id:
          type: string
          example: "Fkrp9n844hj7gtr"
        title:
          type: string
          example: "what is your name?"
        hint:
          type: string
          example: "Enter your name here"
          # todo note that this can be returned as empty string ""
        fields:
          type: array
          items:
            $ref: "#/components/schemas/field"
        help:
          $ref: "#/components/schemas/help"
        showIf:
          description: if present then this is the field condition that must be met to show the question
          type: string
          example: "(Fl1cgaazb4yehd = true)"
      required:
        - id
        - title
        - hint
        - fields

    questions:
      type: array
      items:
        $ref: "#/components/schemas/question"

    currentPageDataPatchRequest:
      properties:
        format:
          $ref: "#/components/schemas/pageDataPatch"
    
    previousPageDataPatchRequest:
      properties:
        format:
          $ref: "#/components/schemas/pageDataPatch"

    nextPageDataPatchRequest:
      properties:
        format:
          $ref: "#/components/schemas/pageDataPatch"
    
    previewPatchRequest:
      properties:
        mimeType:
          $ref: "#/components/schemas/previewMimeType"

    preview:
      properties:
        mimeType:
          $ref: "#/components/schemas/previewMimeType"
        data:
          type: string
          description: Base64 encoded string of the html of the document representing the document preview,
            if answers have been provided then these will be included in the preview
          example: "PGh0bWw+PGJvZHk+Um9ja2V0RG9jdW1lbnQgcHJldmlldzwvYm9keT48L2h0bWw+Cg=="
      required:
        - mimeType
        - data

    previewMimeType:
      description: Mime-type for the preview.
      type: string
      enum:
        - "text/html"
      default: text/html

    entityResponse:
      description: Response object containing information about entities retrieved.
      type: object
      properties:
        partnerEndUserId:
          description: The user ID defined by the partner. This ID uniquely identifies the user within the partner's system.
          type: string
          example: 5bde4f56-363a-42f7-ad23-4b4aa0c94123
        entityInstances:
          description: An array containing instances of entities.
          type: array
          items:
            $ref: "#/components/schemas/entityInstance"
      required:
        - partnerEndUserId
        - entityInstances

    entityInstance:
      description: Entity Instance
      type: object
      properties:
        class:
          $ref: "#/components/schemas/entityInstanceClass"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/entityInstanceRole"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/entityInstanceField"

    entityInstanceClass:
      type: string
      description: |
        The classification of the entity instance. This classification indicates the type of entity, which can be:
        - **Person**: An individual entity.
        - **Organization**: A corporate or business entity.
        - **Property**: A physical or real estate entity.
      enum:
        - Person
        - Organization
        - Property
      example:
        Person

    entityInstanceRole:
      type: object
      description: Represents the role of an entity instance within a specific context.
      properties:
        name:
          description: The name of the role assigned to the entity instance. This defines the function or responsibility of the entity within the context.
          type: string
          example: Signer
        scopingInstanceId:
          description: The unique identifier (UUID) that scopes the role to a particular instance. This helps in distinguishing the role within a specific context.
          type: string
          example: 3020A1EC-6D3B-4AE0-8213-9CDAB7740503

    entityInstanceField:
      description: Represents a field within an entity instance, including the class and value of the field.
      type: object
      properties:
        fieldClass:
          description: The classification of the field. This typically represents the type or category of the information contained in the field, such as a name or address.
          type: string
          example: Name
        fieldValue:
          description: The actual value of the field. This contains the specific information or data related to the fieldClass.
          type: string
          example: Joe Piscopo

    storageType:
      description: |
        Specifies the type of backend data storage strategy used for this interview.
        Use `persistent` to indicate that the interview should store user-entered information.
        Keep in mind that `ephemeral` interview answers are not stored.
      type: string
      enum:
        - ephemeral
        - persistent
      default: persistent

    tam:
      description: |
        The Tagged Answer Model (TAM) represents the structured format for injecting data into an interview or retrieving data from an interview.
        This model maps the input data to the corresponding fields and entities within the document template.
      type: object
      properties:
        name:
          type: string
          description: The name of the template being used for the interview.
          example: Employment contract
        templateId:
          $ref: "#/components/schemas/templateId"
        entities:
          type: array
          items:
            $ref: "#/components/schemas/tamEntity"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/tamField"

    tamField:
      type: object
      description: |
        Each field corresponds to a data point in the interview, allowing for the collection and retrieval of user-entered information. 
        These fields are pre-filled with initial data and align with the template's structure, facilitating a customized and relevant interview process.
      properties:
        entity:
          description: This entity correlates with an object in the entities array, linking the field to a specific entity involved in the interview. The entity helps to contextualize the field within the broader interview structure.
          type: string
        fieldClass:
          $ref: "#/components/schemas/tamEntityClass"
        type:
          $ref: "#/components/schemas/fieldType"
        value:
          type: string
          description: |
            The actual value of the field. 
            This is the data entered by the user or provided initially, corresponding to the field's type and purpose within the interview.

    tamEntity:
      type: object
      description: |
        Represents an entity involved in the interview process. 
        Entities can be individuals, organizations, or properties, each playing specific roles within the context of the interview.
      properties:
        name:
          $ref: "#/components/schemas/tamEntityName"
        class:
          $ref: "#/components/schemas/tamClass"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/tamRole"

    tamClass:
      type: string
      description: |
        The classification of the entity. 
      enum:
        - Person
        - Organization
        - Property
      example:
        Person

    tamRole:
      description: |
        A list of roles that the entity plays within the interview context. 
        Roles define the specific function or position of the entity in the interview, such as 'Applicant' or 'Employer'.
      type: string
      example: "Applicant"

    tamEntityName:
      description: |
        The name of the entity. This could be the name of a person, organization, or property involved in the interview.
      type: string
      example: "Formed Entity"

    tamEntityClass:
      description: |
        The classification of the field within the entity. 
        This defines the type or category of the field, aligning with the entity's role and characteristics.
      type: string
      example: "Entity Type"

    # templateId:
    #   description: The id of the Template resource.
    #   type: string
    #   example: 0bf17ad8-a229-1289-ef4a-00b7c9ad9cab

    templatesGetResponse:
      type: array
      items:
        $ref: "#/components/schemas/template"

    templateGetResponse:
      allOf:
        - $ref: "#/components/schemas/template"

    template:
      type: object
      properties:
        templateId:
          $ref: "#/components/schemas/templateId"
        templateName:
          type: string
          description: The name of the interview template. This name typically reflects the purpose of the template, such as "Employment contract."
          example: Employment contract
        shortDescription:
          type: string
          description:  A brief summary of the document template. This description provides a quick overview of the template's purpose and content.
          example: A contract for employment.
        longDescription:
          type: string
          description: A detailed description of the document template. This description offers an in-depth explanation of the template's contents, including any specific options or considerations.
          example: A contract for employment with options for employer & employee.
        thumbnailRef:
          type: string
          description: A URI to the thumbnail image representing the template. This thumbnail provides a visual representation of the template.
          example: https://api-sandbox.rocketlawyer.com/rocketdoc/v2/templates/0bf17ad8-a229-1289-ef4a-00b7c9ad9cab/thumbnail
        previewRef:
          type: string
          description: A URI to a preview of the template. This preview allows users to see a detailed view of the template before selecting or using it.
          example: https://api-sandbox.rocketlawyer.com/rocketdoc/v2/templates/0bf17ad8-a229-1289-ef4a-00b7c9ad9cab/preview
      required:
        - templateId
        - templateName
        - shortDescription
        - longDescription
        - thumbnailRef
        - previewRef

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []